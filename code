class N_CTRL:
    def pure_loop(self, observation, goal=[0, 0, 0]):
        x_robot = observation[0]
        y_robot = observation[1]
        theta = observation[2]
        x_goal = 0
        y_goal = 0
        theta_goal = 0

        error_x = x_goal - x_robot
        error_y = y_goal - y_robot
        error_theta = theta_goal - theta

        rho = np.sqrt(error_x**2 + error_y**2)
        alpha = -theta + np.arctan2(error_y, error_x)
        beta = error_theta - alpha

        # k_rho = 2
        # k_alpha = 14
        # k_beta = -1.5

        k_rho = 0.15
        k_alpha = 0.17
        k_beta = -0.05

        w = k_alpha*alpha + k_beta*beta
        v = k_rho*rho

        while alpha > np.pi:
            alpha -= 2* np.pi

        while alpha < -np.pi:
            alpha += 2* np.pi

        if -np.pi < alpha <= -np.pi / 2 or np.pi / 2 < alpha <= np.pi:
            v = -v

        return [v,w]
       
